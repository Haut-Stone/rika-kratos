// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.6.2
// - protoc             v3.21.12
// source: api/helloworld/v1/video.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationVideoHttpCreateVideo = "/api.helloworld.v1.Video/HttpCreateVideo"

type VideoHTTPServer interface {
	HttpCreateVideo(context.Context, *CreateVideoRequest) (*CreateVideoReply, error)
}

func RegisterVideoHTTPServer(s *http.Server, srv VideoHTTPServer) {
	r := s.Route("/")
	r.POST("/creat/video", _Video_HttpCreateVideo0_HTTP_Handler(srv))
}

func _Video_HttpCreateVideo0_HTTP_Handler(srv VideoHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateVideoRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationVideoHttpCreateVideo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.HttpCreateVideo(ctx, req.(*CreateVideoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateVideoReply)
		return ctx.Result(200, reply)
	}
}

type VideoHTTPClient interface {
	HttpCreateVideo(ctx context.Context, req *CreateVideoRequest, opts ...http.CallOption) (rsp *CreateVideoReply, err error)
}

type VideoHTTPClientImpl struct {
	cc *http.Client
}

func NewVideoHTTPClient(client *http.Client) VideoHTTPClient {
	return &VideoHTTPClientImpl{client}
}

func (c *VideoHTTPClientImpl) HttpCreateVideo(ctx context.Context, in *CreateVideoRequest, opts ...http.CallOption) (*CreateVideoReply, error) {
	var out CreateVideoReply
	pattern := "/creat/video"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationVideoHttpCreateVideo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
